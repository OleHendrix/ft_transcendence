generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model Account {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  username      String     @unique
  password      String
  totpSecret    String?
  twofa         Boolean    @default(false)
  admin         Boolean    @default(false)
  online        Boolean    @default(false)

  matchesPlayed   Int             @default(0)
  wins            Int             @default(0)
  draws           Int             @default(0)
  losses          Int             @default(0)
  winRate         Float?
  tournamentWins  Int             @default(0)
  elo             Int             @default(400)

  matches         		MatchHistory[]  @relation("matches")
  sentFriendRequests     Friendship[] @relation("Requester")
  receivedFriendRequests Friendship[] @relation("Receiver")
  Blocks                Block[]          @relation("Blocks")
  BlockedBy             Block[]          @relation("BlockedBy")
  sentMessages          Message[]        @relation("SentMessages")     // This represents the sender
  receivedMessages      Message[]        @relation("ReceivedMessages") // This represents the receiver
  account1ChatSessions  ChatSession[]    @relation("account1ChatSessions")
  account2ChatSessions  ChatSession[]    @relation("account2ChatSessions")
}

model Message {
  id            Int        @id @default(autoincrement())
  content       String
  timestamp     DateTime   @default(now())
  senderId      Int
  receiverId    Int
  chatSessionId Int
  status        Int        @default(0) // 0:basic - 1:pending - 2:accepted - 3:rejected

  chatSession   ChatSession   @relation(fields: [chatSessionId], references: [id])
  sender        Account       @relation("SentMessages", fields: [senderId], references: [id])
  receiver      Account       @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model ChatSession {
  id         Int      @id @default(autoincrement())
  account1Id Int
  account2Id Int
  createdAt  DateTime @default(now())
  messages   Message[]

  account1   Account  @relation("account1ChatSessions", fields: [account1Id], references: [id])
  account2   Account  @relation("account2ChatSessions", fields: [account2Id], references: [id])
}

model Friendship {
	id				Int @id @default(autoincrement())
	requesterId		Int
	receiverId		Int
	accepted 		Boolean @default(false)
	createdAt   	DateTime @default(now())

	requester		Account  @relation("Requester", fields: [requesterId], references: [id])
 	receiver  		Account  @relation("Receiver", fields: [receiverId], references: [id])
}

model Block {
  id          Int      @id @default(autoincrement())
  blockerId   Int
  blockedId   Int

  blocker     Account  @relation("Blocks", fields: [blockerId], references: [id])
  blocked     Account  @relation("BlockedBy", fields: [blockedId], references: [id])
  createdAt   DateTime @default(now())
}

model MatchHistory {
  id      Int     @id @default(autoincrement())
  winner  String
  p1      String
  p2      String
  p1score Int
  p2score Int
  p1Elo   Int
  p2Elo   Int
  p1Diff  Int
  p2Diff  Int
  time    DateTime @default(now())

  accountId Int
  account   Account @relation("matches", fields: [accountId], references: [id])
}